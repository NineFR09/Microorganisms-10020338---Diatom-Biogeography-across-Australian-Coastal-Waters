## Load libraries
```{r}
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
lirbary(broom) # for the tidy() function
library(vegan)
library(FSA) # for figure 4
library(writexl)
library(readxl)
library(rstatix)
```

## STATS - Figure 2 (Kruskal-Wallis & Wilcoxon) -----------------------------------------
```{r}
## Temperature
kruskal.test(env_data$temperature_deg_c ~ env_data$uniqcode)
temp_res <- pairwise.wilcox.test(env_data$temperature_deg_c, env_data$uniqcode, p.adjust.method = "BH") %>% tidy() %>% as.data.frame()
## Phosphate 
phosphate <- env_data %>% filter(!sample == c("34237")) # = outlier removed in the figure
kruskal.test(phosphate$phosphate_umol_per_l ~ phosphate$uniqcode)
phos_res <- pairwise.wilcox.test(phosphate$phosphate_umol_per_l, phosphate$uniqcode, p.adjust.method = "BH") %>% tidy() %>% as.data.frame()
## Ammonium 
ammonium <- env_data %>% filter(!sample == c("21862", "21952")) # = outlier removed in the figure
kruskal.test(env_data$ammonium_umol_per_l ~ env_data$uniqcode)
amm_res <- pairwise.wilcox.test(ammonium$ammonium_umol_per_l, ammonium$uniqcode, p.adjust.method = "BH") %>% tidy() %>% as.data.frame()
## Nitrate 
nitrate <- env_data %>% filter(!sample == c("35355")) # = outlier removed in the figure
kruskal.test(env_data$nitrate_nitrite_umol_per_l ~ env_data$uniqcode)
nitr_res <- pairwise.wilcox.test(nitrate$nitrate_nitrite_umol_per_l, nitrate$uniqcode, p.adjust.method = "BH") %>%  tidy() %>%  as.data.frame()
## Day length 
kruskal.test(env_data$day_length ~ env_data$uniqcode)
day_res <- pairwise.wilcox.test(env_data$day_length, env_data$uniqcode, p.adjust.method = "BH") %>%
  tidy() %>%  as.data.frame()
## Silicate 
kruskal.test(env_data$silicate_umol_per_l ~ env_data$uniqcode)
sili_res <- pairwise.wilcox.test(env_data$silicate_umol_per_l, env_data$uniqcode, p.adjust.method = "BH") %>% tidy() %>% as.data.frame()
## Salinity 
kruskal.test(env_data$salinity_psu...12 ~ env_data$uniqcode)
sali_res <- pairwise.wilcox.test(env_data$salinity_psu...12, env_data$uniqcode, p.adjust.method = "BH") %>% tidy() %>% as.data.frame()

## Create a column with the variable tested
temp_res <- temp_res %>% mutate(var = "temperature_deg_c")
phos_res <- phos_res %>% mutate(var = "phosphate_umol_per_l")
amm_res <- amm_res %>% mutate(var = "ammonium_umol_per_l")
nitr_res <- nitr_res %>% mutate(var = "nitrate_nitrite_umol_per_l")
day_res <- day_res %>% mutate(var = "day_length")
sili_res <- sili_res %>% mutate(var = "silicate_umol_per_l")
sali_res <- sali_res %>% mutate(var = "salinity_psu...12")

## Merge all the files together to save it
env_pairwisewilcoxon <- combine(temp_res,phos_res,amm_res,nitr_res,day_res,sili_res,sali_res)

## Create Table with min/max/sd for each site 
## Temperature
temp.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(Temperature), sd = sd(Temperature), max = max(Temperature), min = min(Temperature))
## Silicate
silica.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(silicate_umol_per_l), sd = sd(silicate_umol_per_l), max = max(silicate_umol_per_l), min = min(silicate_umol_per_l)) 
## Phosphate
phosphate.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(Phosphate), sd = sd(Phosphate), max = max(Phosphate), min = min(Phosphate))
## Ammonium
ammonium.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(Amonium), sd = sd(Amonium), max = max(Amonium), min = min(Amonium))
##  Nitrate
nitrate.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(Nitrate), sd = sd(Nitrate), max = max(Nitrate), min = min(Nitrate))
## Salinity
salinity.av <- env_data %>% group_by(uniqcode) %>% summarise(mean = mean(salinity_psu...12), sd = sd(salinity_psu...12), max = max(salinity_psu...12), min = min(salinity_psu...12))
```

## STATS - Figure 3 (PERMANOVA) -----------------------------------------
1) To remove all na
```{r}
diatoms_surf <- ungroup(diatoms_rare) %>% filter(depth_m == 2) ## 212 samples
diatoms.na <- ungroup(diatoms_surf) %>% select("sample", "uniqcode", "date_utc", "GID", "depth_m", "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "abund_rare","RA.percent", "year", "month", 'ASVid','tax.Kingdom', 'tax.Supergroup','tax.Division','tax.Class','tax.Family', 'tax.Genus','tax.Species', 'GID', 'ASV', "longitude_decimal_degrees", "latitude_decimal_degrees")
diatoms.na <- na.omit(diatoms.na) 
diatoms.na <- distinct(diatoms.na)
diatoms.na <- diatoms.na %>% arrange(sample)
```
2) Create an ASV matrix
```{r}
com <- ungroup(diatoms.na) %>% select('sample', 'GID', 'RA.percent') %>% spread(key =sample, value=RA.percent, fill=0)  
com.matrix <-  as.matrix(com[,-c(1)])
row.names(com.matrix)<- paste0(com$GID)
com.matrix.nz <- com.matrix[,colSums(com.matrix)!=0] 
```
3) Create a Sample data table
```{r}
env.vars <- ungroup(diatoms.na) %>% select(c("date_utc", "day_length", "temperature_deg_c", "silicate_umol_per_l", "depth_m", "sample",  "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "uniqcode", "longitude_decimal_degrees", "latitude_decimal_degrees")) 
env.vars <- distinct(env.vars)
env.vars <- env.vars %>% arrange(sample)
rownames(env.vars) <- env.vars$sample
```
4) STATS - pairwise comparison
```{r}
## function pairwise.adonis() - from GitHub 'pmartinezarbizu'
pairwise.adonis <- function(x,factors, sim.function = 'vegdist', sim.method = 'bray', p.adjust.m ='bonferroni',reduce=NULL,perm=9999)
{
  
  co <- combn(unique(as.character(factors)),2)
  pairs <- c()
  Df <- c()
  SumsOfSqs <- c()
  F.Model <- c()
  R2 <- c()
  p.value <- c()
  
  
  for(elem in 1:ncol(co)){
    if(inherits(x, 'dist')){
      x1=as.matrix(x)[factors %in% c(as.character(co[1,elem]),as.character(co[2,elem])),
                      factors %in% c(as.character(co[1,elem]),as.character(co[2,elem]))]
      }
  
    else  (
      if (sim.function == 'daisy'){
            x1 = daisy(x[factors %in% c(co[1,elem],co[2,elem]),],metric=sim.method)
        } 
      else{x1 = vegdist(x[factors %in% c(co[1,elem],co[2,elem]),],method=sim.method)}
    )
    
    ad <- adonis(x1 ~ factors[factors %in% c(co[1,elem],co[2,elem])],
                 permutations = perm);
    pairs <- c(pairs,paste(co[1,elem],'vs',co[2,elem]));
    Df <- c(Df,ad$aov.tab[1,1])
	SumsOfSqs <- c(SumsOfSqs, ad$aov.tab[1,2])
	F.Model <- c(F.Model,ad$aov.tab[1,4]);
    R2 <- c(R2,ad$aov.tab[1,5]);
    p.value <- c(p.value,ad$aov.tab[1,6])
  }
  p.adjusted <- p.adjust(p.value,method=p.adjust.m)
  
  sig = c(rep('',length(p.adjusted)))
  sig[p.adjusted <= 0.05] <-'.'
  sig[p.adjusted <= 0.01] <-'*'
  sig[p.adjusted <= 0.001] <-'**'
  sig[p.adjusted <= 0.0001] <-'***'
  pairw.res <- data.frame(pairs,Df,SumsOfSqs,F.Model,R2,p.value,p.adjusted,sig)
  
  if(!is.null(reduce)){
    pairw.res <- subset (pairw.res, grepl(reduce,pairs))
    pairw.res$p.adjusted <- p.adjust(pairw.res$p.value,method=p.adjust.m)
    
    sig = c(rep('',length(pairw.res$p.adjusted)))
 	sig[pairw.res$p.adjusted <= 0.1] <-'.'
	sig[pairw.res$p.adjusted <= 0.05] <-'*'
	sig[pairw.res$p.adjusted <= 0.01] <-'**'
	sig[pairw.res$p.adjusted <= 0.001] <-'***'
    pairw.res <- data.frame(pairw.res[,1:7],sig)
  }
  class(pairw.res) <- c("pwadonis", "data.frame")
  return(pairw.res)
} 
```
5) STATS - PERMANOVA
```{r}
permanova <- adonis2(t(com.matrix.nz) ~ uniqcode,
               data = env.vars, permutations=9999, method = "bray")

perm.pairwise <- pairwise.adonis(t(com.matrix.nz), env.vars$uniqcode, 
                                 sim.function = "vegdist",
                                 sim.method = "bray",
                                 p.adjust.m = "BH")

```

## STATS - Figure 5 (Kruskal-Wallis) -----------------------------------------
1) We made the the initial dissimilarity matrix in R, modify them in excel and then do Kruskal-Wallis test in SPSS (or R it give same results)
```{r}
diatoms_rare <- diatoms_rare %>% mutate(twoseason = NA)
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Jan")] <- "summer"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Feb")] <- "summer"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Mar")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Apr")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "May")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Jun")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Jul")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Aug")] <- "winter"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Sep")] <- "summer"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Oct")] <- "summer"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Nov")] <- "summer"
diatoms_rare$twoseason[str_detect(diatoms_rare$month.abb, "Dec")] <- "summer"
diatoms_surf <- diatoms_rare %>% filter(depth_m ==2)
```
Create NSI Bray-Curtis dissimilarity matrix
```{r}
#Subset NSI
nsi <- diatoms_surf %>% select("sample", "abund_rare", "date_utc", "twoseason","uniqcode","GID") %>% filter(uniqcode %in% "NSI") %>%  arrange(date_utc)
#ASV matrix
nsi_wide <- nsi %>% select("sample", "abund_rare", "GID") %>% spread(key = GID, value = abund_rare, fill=0) 
nsi_wide <- nsi_wide[order(nsi_wide$sample),]
nsi.matrix <-  as.matrix(nsi_wide[,-c(1)]) 
row.names(nsi.matrix)<- paste0(nsi_wide$sample)
nsi.matrix.nz <- nsi.matrix[,colSums(nsi.matrix)!=0] 
#metadata data frame
nsi_metadata <- nsi %>% select("sample", "date_utc", "twoseason","uniqcode")
nsi_metadata <- distinct(nsi_metadata)
nsi_metadata <- nsi_metadata[order(nsi_metadata$sample),]
#make the BC matrix 
nsi_bc <- vegdist(nsi.matrix.nz, method = "bray")
nsi_bc_matrix <- as.matrix(nsi_bc)
nsi_bc_df <- as.data.frame(nsi_bc_matrix)
nsi_bc_df$sample <- rownames(nsi_bc_df)
#left join the season / metadata again 
nsi_bc_df$sample <- as.numeric(nsi_bc_df$sample)
nsi_bc_wide <- nsi_bc_df %>% left_join(nsi_metadata)
row.names(nsi_bc_wide) <- nsi_bc_wide$sample
nsi_bc_wide <- nsi_bc_wide  %>%  arrange(date_utc)
#write a csv file
writexl::write_xlsx(nsi_bc_wide, "BCsimilarity_NSIwide_SurfaceWater.xlsx")
```
Create PHB Bray-Curtis dissimilarity matrix
```{r}
#Subset PHB
phb <- diatoms_surf %>% select("sample", "abund_rare", "date_utc", "twoseason","uniqcode","GID") %>% filter(uniqcode %in% "PHB") %>%  arrange(date_utc)
#ASV matrix
phb_wide <- phb %>% select("sample", "abund_rare", "GID") %>% spread(key = GID, value = abund_rare, fill=0) 
phb_wide <- phb_wide[order(phb_wide$sample),]
phb.matrix <-  as.matrix(phb_wide[,-c(1)]) 
row.names(phb.matrix)<- paste0(phb_wide$sample)
phb.matrix.nz <- phb.matrix[,colSums(phb.matrix)!=0] 
#metadata data frame
phb_metadata <- phb %>% select("sample", "date_utc", "twoseason","uniqcode")
phb_metadata <- distinct(phb_metadata)
phb_metadata <- phb_metadata[order(phb_metadata$sample),]
#make the BC matrix 
phb_bc <- vegdist(phb.matrix.nz, method = "bray")
phb_bc_matrix <- as.matrix(phb_bc)
phb_bc_df <- as.data.frame(phb_bc_matrix)
phb_bc_df$sample <- rownames(phb_bc_df)
#left join the season / metadata again 
phb_bc_df$sample <- as.numeric(phb_bc_df$sample)
phb_bc_wide <- phb_bc_df %>% left_join(phb_metadata)
row.names(phb_bc_wide) <- phb_bc_wide$sample
phb_bc_wide <- phb_bc_wide  %>%  arrange(date_utc)
#write a csv file
writexl::write_xlsx(phb_bc_wide, "BCsimilarity_PHBwide_SurfaceWater.xlsx")
```
Create MAI Bray-Curtis dissimilarity matrix
```{r}
#Subset MAI
mai <- diatoms_surf %>% select("sample", "abund_rare", "date_utc", "twoseason","uniqcode","GID") %>% filter(uniqcode %in% "MAI") %>%  arrange(date_utc)
#ASV matrix
mai_wide <- mai %>% select("sample", "abund_rare", "GID") %>% spread(key = GID, value = abund_rare, fill=0) 
mai_wide <- mai_wide[order(mai_wide$sample),]
mai.matrix <-  as.matrix(mai_wide[,-c(1)]) 
row.names(mai.matrix)<- paste0(mai_wide$sample)
mai.matrix.nz <- mai.matrix[,colSums(mai.matrix)!=0] 
#metadata data frame
mai_metadata <- mai %>% select("sample", "date_utc", "twoseason","uniqcode")
mai_metadata <- distinct(mai_metadata)
mai_metadata <- mai_metadata[order(mai_metadata$sample),]
#make the BC matrix 
mai_bc <- vegdist(mai.matrix.nz, method = "bray")
mai_bc_matrix <- as.matrix(mai_bc)
mai_bc_df <- as.data.frame(mai_bc_matrix)
mai_bc_df$sample <- rownames(mai_bc_df)
#left join the season / metadata again 
mai_bc_df$sample <- as.numeric(mai_bc_df$sample)
mai_bc_wide <- mai_bc_df %>% left_join(mai_metadata)
row.names(mai_bc_wide) <- mai_bc_wide$sample
mai_bc_wide <- mai_bc_wide  %>%  arrange(date_utc)
#write a csv file
writexl::write_xlsx(mai_bc_wide, "BCsimilarity_MAIwide_SurfaceWaters.xlsx")
```
2) Once you have modified all the file in excel and replaced the sample by the season you need to come back here and make them long format with first colum = season1 and the column name season2
```{r}
NSI_bc <- read_excel("~/PHD/CHAPTER1_BPAsequences_TimeSerie/BCsimilarity_NSIwide_SurfaceWaters.xlsx")
## rename the first column season1 before to gather 
names(NSI_bc)[names(NSI_bc) == "...1"] <- "season1"
##gather the rest into season2
colnames(NSI_bc)
NSI_bc_long <- NSI_bc %>% gather(key="season2", value = 'similarity', 2:41)
NSI_bc_long <- distinct(NSI_bc_long)
write_csv(NSI_bc_long,"BCsim_long_NSI.csv")
```
```{r}
PHB_bc <- read_excel("~/PHD/CHAPTER1_BPAsequences_TimeSerie/BCsimilarity_PHBwide_SurfaceWaters.xlsx")
## rename the first column season1 before to gather 
names(PHB_bc)[names(PHB_bc) == "...1"] <- "season1"
##gather the rest into season2
colnames(PHB_bc)
PHB_bc_long <- PHB_bc %>% gather(key="season2", value = 'similarity', 2:39)
PHB_bc_long <- distinct(PHB_bc_long)
write_csv(PHB_bc_long,"BCsim_long_PHB.csv")
```
```{r}
MAI_bc <- read_excel("~/PHD/CHAPTER1_BPAsequences_TimeSerie/BCsimilarity_MAIwide_SurfaceWater.xlsx")
## rename the first column season1 before to gather 
names(MAI_bc)[names(MAI_bc) == "...1"] <- "season1"
##gather the rest into season2
colnames(MAI_bc)
MAI_bc_long <- MAI_bc %>% gather(key="season2", value = 'similarity', 2:47)
MAI_bc_long <- distinct(MAI_bc_long)
write_csv(MAI_bc_long,"BCsim_long_MAI.csv")
```
The following chunk of code is to determine the mean and sd similarity for 6month and yearly 
```{r}
#NSI
nsi.av <- BCsim_long_NSI %>% group_by(seasons) %>% dplyr::summarise(mean = mean(similarity), sd = sd(similarity), max = max(similarity), min = min(similarity))
#PHB
phb.av <- BCsim_long_PHB %>% group_by(seasons) %>% dplyr::summarise(mean = mean(similarity), sd = sd(similarity), max = max(similarity), min = min(similarity))
#MAI
mai.av <- BCsim_long_MAI %>% group_by(seasons) %>% dplyr::summarise(mean = mean(similarity), sd = sd(similarity), max = max(similarity), min = min(similarity))
```

## STATS - Figure 6 (Wilcoxon test) -----------------------------------------
```{r}
##Load the file with the average alpha diversity of bacteria
bac_CCA_FamilyAV <- bac_subset2_wide2 
##to add the bacteria alpha diversity indices
#diatoms_alpha <- left_join(diatoms_surf, alpha_bac)
diatoms_fam <- left_join(diatoms_surf, bac_CCA_FamilyAV)
diatoms_fam <- diatoms_fam %>% unite("year_season", c(year, season), remove=F, sep=';')
```
```{r, }
env.vars2 <- diatoms_fam %>% dplyr::select(c("sample", "date_utc", "GID", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "abund_rare", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season", "uniqcode"))
env.vars2 <- na.omit(env.vars2)
env.vars2 <- distinct(env.vars2)
env_data <- env.vars2
```
```{r}
NSI <- env_data %>% filter(uniqcode == "NSI")
PHB <- env_data %>% filter(uniqcode == "PHB")
MAI <- env_data %>% filter(uniqcode == "MAI")
```
Then, we did pairwise Wilcoxon test for each environmental variable by season for each site separately using the following code (the same was done for PHB and MAI)
```{r}
## Temperature 
kruskal.test(NSI$temperature_deg_c ~ NSI$season)
NSI_temp_res <- pairwise.wilcox.test(NSI$temperature_deg_c, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Phosphate 
kruskal.test(NSI$phosphate_umol_per_l ~ NSI$season)
NSI_phos_res <- pairwise.wilcox.test(NSI$phosphate_umol_per_l, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Ammonium 
kruskal.test(NSI$ammonium_umol_per_l ~ NSI$season)
NSI_amm_res <- pairwise.wilcox.test(NSI$ammonium_umol_per_l, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Nitrate 
kruskal.test(NSI$nitrate_nitrite_umol_per_l ~ NSI$season)
NSI_nitr_res <- pairwise.wilcox.test(NSI$nitrate_nitrite_umol_per_l, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Day length 
kruskal.test(NSI$day_length ~ NSI$season)
NSI_day_res <- pairwise.wilcox.test(NSI$day_length, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Silicate 
kruskal.test(NSI$silicate_umol_per_l ~ NSI$season)
NSI_sili_res <- pairwise.wilcox.test(NSI$silicate_umol_per_l, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Salinity 
kruskal.test(NSI$salinity_psu...12 ~ NSI$season)
NSI_sali_res <- pairwise.wilcox.test(NSI$salinity_psu...12, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Alteromonadaceae_Marinobacter 
kruskal.test(NSI$Alteromonadaceae_Marinobacter ~ NSI$season)
NSI_altero_res <- pairwise.wilcox.test(NSI$Alteromonadaceae_Marinobacter, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Flavobacteriaceae 
kruskal.test(NSI$Flavobacteriaceae ~ NSI$season)
NSI_flavo_res <- pairwise.wilcox.test(NSI$Flavobacteriaceae, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)
## Rhodobacteraceae 
kruskal.test(NSI$Rhodobacteraceae ~ NSI$season)
NSI_rhodo_res <- pairwise.wilcox.test(NSI$Rhodobacteraceae, NSI$season, p.adjust.method = "BH") %>% tidy() %>% as.data.frame() %>% filter(p.value <0.05)


## Create a column with the variable tested
NSI_temp_res <- NSI_temp_res %>% mutate(var = "temperature_deg_c")
NSI_phos_res <- NSI_phos_res %>% mutate(var = "phosphate_umol_per_l")
NSI_amm_res <- NSI_amm_res %>% mutate(var = "ammonium_umol_per_l")
NSI_nitr_res <- NSI_nitr_res %>% mutate(var = "nitrate_nitrite_umol_per_l")
NSI_day_res <- NSI_day_res %>% mutate(var = "day_length")
NSI_sili_res <- NSI_sili_res %>% mutate(var = "silicate_umol_per_l")
NSI_sali_res <- NSI_sali_res %>% mutate(var = "salinity_psu...12")
NSI_altero_res <- NSI_altero_res %>% mutate(var = "Alteromonadaceae_Marinobacter")
NSI_flavo_res <- NSI_flavo_res %>% mutate(var = "Flavobacteriaceae")
NSI_rhodo_res <- NSI_rhodo_res %>% mutate(var = "Rhodobacteraceae")

##Merge all the files together
NSI_pairwisewilcoxon <- combine(NSI_temp_res,NSI_phos_res,NSI_amm_res,NSI_nitr_res,NSI_day_res,NSI_sili_res,NSI_sali_res,NSI_altero_res,NSI_flavo_res,NSI_rhodo_res)
#writexl::write_xlsx(NSI_pairwisewilcoxon, "NSI_pairwisewilcoxon_season.xlsx")
```

