##Load 18S and 16S rarefied files + libraries 
```{r}
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggforce)
library(ggfortify)
library(vegan)
library(FSA) # for figure 4
library(RColorBrewer)
library(randomcoloR)
library(writexl)
library(readxl)
```
```{r}
#Diatoms
diatoms_rare <- read_csv("~/diatoms_rare_070521.csv")
diatoms_rare$uniqcode <- factor(diatoms_rare$uniqcode, levels =rev(c("MAI", "KAI", "PHB","ROT", "NSI", "YON", "DAR")))
diatoms_rare <- diatoms_rare %>% filter(year > 2014)  
diatoms_surf <- diatoms_rare %>% filter(depth_m == 2)
```
```{r}
#Bacteria 
bac_rare <- read_csv("~/bac_nrs_rare20k.nine.060521.csv") 
bac_rare$uniqcode <- factor(bac_rare$uniqcode, levels =rev(c("MAI", "KAI", "PHB","ROT", "NSI", "YON", "DAR")))
bac_rare <- bac_rare %>% separate(utc_date_sampled_yyyymmdd , c('year','month','day'), sep='-', remove=F)
bac_rare <- bac_rare %>% filter(year > 2014) 
colnames(bac_rare)[colnames(bac_rare) == "code"] <- "sample"
bac_rare <- bac_rare %>% unite('FG', c(tax.Family, tax.Genus), remove = F, sep = ';')
bac_rare <- bac_rare %>% unite('OFG', c(tax.Order, FG), remove=F, sep=';')
bac_rare <- bac_rare %>% unite('OF', c(tax.Order, tax.Family), remove=F, sep=';')
bac_rare$bac <- c("bac")
bac_rare <- bac_rare %>% unite('tax.Genus', c(bac, tax.Genus), remove=T, sep=';')
bac_rare <- bac_rare %>% unite('GID', c(tax.Genus, ASVid), remove=F, sep=';')
bac_surf <- ungroup(bac_rare) %>% filter(depth_m == 2)
# Calculate sample total
bac_tot <- bac_surf %>% group_by(sample) %>% dplyr::summarise(total_bac = sum(abund_rare))
bac_tot <- bac_surf %>% left_join(bac_tot)
# Calculate relative abundance
bac_RA <- bac_tot %>% group_by(sample, ASV) %>% mutate(RA.percent= (abund_rare / total_bac)*100)
bac_RA <- bac_tot %>% group_by(sample, tax.Family) %>% mutate(RA.fam= (abund_rare / total_bac)*100)
bac_RA2 <- bac_RA %>% group_by(sample, ASV) %>% mutate(proportion= (abund_rare / total_bac))
bac_surf2 <- bac_RA2 
```
```{r}
#Colours used for the NRS station
display.brewer.pal(9, "Set1")
brewer.pal(9, "Set1")
#c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628")
#DAR = "#E41A1C", YON = "#377EB8", NSI = "#4DAF4A", ROT = "#984EA3", PHB = "#FF7F00", KAI = "#FFFF33", MAI = "#A65628"
```
## Figure 1 (NRS station MAP) 
```{r}
#Load specific library
library(maps)
library(mapdata)
library(ncdf4)
library(oce)
library(rnaturalearthdata)
library(rnaturalearth)
library(rgeos)
```
```{r}
sst01<-nc_open("~/IMOS_aggregation_20210618T062349Z.nc")
sst01.d<-ncvar_get(sst01, 'sea_surface_temperature');  ### check the variable name is correct, can be 'sst4', or other names
sstlon <- ncvar_get(sst01, 'lon')
sstlat <- ncvar_get(sst01, 'lat')
sstL<-vector('list', length(sst01.d))

  sstL <-as.vector(sst01.d-273.15)
## Arrange the data into long format for ggplot
longitude<- rep(sstlon, length(sstlat))
## This loop might take a while and would be improved by converting to an apply function
latitude  <- NA
for (i in seq_along(sstlat)){
  latitude <-c(latitude , rep(sstlat[i],length(sstlon)))
}
sst=as.vector(sstL)
SSTlong<-as.data.frame(cbind(lat=latitude[1:length(sst)], lon=longitude[1:length(sst)], sst=as.vector(sstL)))

world <- ne_countries(scale = "Medium", returnclass = "sf")

#To create a dataframe with the coordinate of the NRS station 
NRSlabs <- data.frame(
  lat = c(-12.4634, -27.5323, -32.0064, -19.4591, -34.0692, -35.7752, -42.6451), 
  long = c(130.8456, 153.4626, 115.5073, 147.4805, 151.125, 137.2142, 148.065), 
  names = c("DAR", "NSI", "ROT", "YON", "PHB", "KAI", "MAI"), 
  stringsAsFactors = FALSE
)

NRSlabs$names <- factor(NRSlabs$names, levels =c("DAR", "YON", "NSI", "ROT", "PHB", "KAI", "MAI"))

xrange <- c(105,162)
yrange <- c (-50, -6)

mycol7 <- c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628")

ggplot() + 
  geom_tile(data=SSTlong, aes(x=lon, y=lat, fill=sst)) + 
        scale_fill_gradientn(colors=oceColorsTemperature(300), na.value = NA, name='SST (°C)', limits=c(4,30)) +   
  geom_sf(data = world, lwd = 0) + coord_sf(xlim = xrange, ylim=yrange, expand=F) +
  #geom_segment(data=as.data.frame(dat2), aes(x=x, xend=x2, y=y, yend=y2), lwd=0.1, arrow = arrow(type = 'open',length = unit(0.05, "cm"))) + 
  geom_point(data=NRSlabs, aes(x=long, y=lat, color = names), size = 8) +
  scale_color_manual(values=mycol7, name='NRS station') +
  #geom_label(data=NRSlabs, aes(x=long, y=lat, label=names), size=8) + #%>%  filter(long> 143, lat < -21) color='white', fill='black', label.padding=unit(0.1,'cm'),
  labs(title='', x= 'Longitude (°E)', y='Latitude (°N)') +
  theme_bw() +
  theme(plot.title = element_text(size = 14, family = "Arial", face = "bold"),
        text=element_text(family = "Arial"),
        axis.title = element_text(size = 20, family = "Arial",face="bold"),
        axis.text.x = element_text(colour="black", size = 18, face = "bold", vjust = 0.6),
        axis.text.y = element_text(colour="black", size = 18),
        axis.line = element_line(size=0.5, colour = "black"),
        legend.title = element_text(colour= "black", size=20, face= "bold" ),
        legend.text = element_text(size = 14)) 
```

## Figure 2 (Environmental data boxplot)
1) Sample data table
```{r}
env.vars2 <- diatoms_surf %>% dplyr::select(c("date_utc", "depth_m", "sample", "uniqcode", "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "salinity_psu...12",  "longitude_decimal_degrees", "latitude_decimal_degrees"))
env.vars2 <- na.omit(env.vars2)
env.vars2 <- distinct(env.vars2)
env_data <- env.vars2
```
2)MULTIPLOT function
```{r}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
```
3) Create boxplot for each variable and group them in one panel
```{r}
fill = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628")

## TEMPERATURE boxplot
ggtemp <- ggplot(env_data, aes(x= uniqcode, y= temperature_deg_c, colour = temperature_deg_c )) +
  geom_boxplot(colour = "black", fill = fill, size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Temperature (°C)", guide = "none") +
  scale_y_continuous(limits = c(0,40)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Temperature (°C)")
ggtemp #no specific outlier for any site

## PHOSPHATE boxplot
ggphosp <- ggplot(phosphate , aes(x= uniqcode, y= phosphate_umol_per_l, colour = phosphate_umol_per_l )) + #%>% filter(!sample == c("34237"))
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Phosphate (umol/mL)", guide = "none") +
  scale_y_continuous(limits = c(0,0.6)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial", face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Phosphate (umol/mL)")
ggphosp# sample = 34237 is an outlier for DAR

## NITRATE boxplot
ggnitrate <- ggplot(nitrate , aes(x= uniqcode, y= nitrate_nitrite_umol_per_l, colour = nitrate_nitrite_umol_per_l )) + #%>% filter(!sample == c("35355"))
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Nitrate (umol/mL)", guide = "none") +
  scale_y_continuous(limits = c(0,8)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Nitrate (umol/mL)")  
ggnitrate # sample = 35355 is an outlier for DAR

## AMMONIUM boxplot
ggamo <- ggplot(ammonium , aes(x= uniqcode, y= ammonium_umol_per_l, colour = ammonium_umol_per_l )) +#%>% filter(!sample == c("21862", "21952"))  
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Ammonium (umol/mL)", guide = "none") +
  scale_y_continuous(limits = c(0,1.2)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Ammonium (umol/mL)")  
ggamo # sample = 21862 is an outlier for PHB; 21952 for NSI

## SILICATE boxplot
ggsili <- ggplot(env_data, aes(x= uniqcode, y= silicate_umol_per_l, colour = silicate_umol_per_l )) + 
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Silicate (umol/mL)", guide = "none") +
  scale_y_continuous(limits = c(0,8)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Silicate (umol/mL)")  
ggsili # no specific outliers

## DAYLENGHT boxplot
ggtime <- ggplot(env_data, aes(x= uniqcode, y= day_length, colour = day_length )) + 
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Day length (hour)", guide = "none") +
  scale_y_continuous(limits = c(0,16)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Daylength (h)")  
ggtime # no specific outliers
  
## SALINITY boxplot
ggsal <- ggplot(env_data, aes(x= uniqcode, y= salinity_psu...12, colour = salinity_psu...12 )) + 
  geom_boxplot(colour = "black", fill = fill,size  = 1, outlier.shape = NA) + #outlier.shape = 1
  geom_jitter(width = 0.2) +
  scale_colour_steps(low = "#FFCCCC", high = "#CC0000", "Salinity (hour)", guide = "none") +
  scale_y_continuous(limits = c(32,38)) +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 14, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 14, face = "bold"),
              axis.text.y = element_text(colour="black", size = 14),
              axis.line = element_line(size=0.5, colour = "black")) +
  labs(x = "",
       y = "Salinity (psu)")  
ggsal  # no specific outliers

multiplot(ggtemp, ggphosp, ggnitrate, ggamo, ggsili, ggsal, ggtime, cols=2)
```

## Figure 3 (barplot - Genera relative abundance per site)
```{r}
diatoms_surf <- diatoms_rare %>% filter(depth_m == 2)
subset <-  diatoms_surf %>% select("tax.Genus", "sample", "abund_rare", "uniqcode", "date_utc")
subset_total <- subset %>% group_by(date_utc, tax.Genus, uniqcode) %>% summarise(newtot = sum(abund_rare))
subset_total2 <- subset_total %>% group_by(uniqcode) %>% summarise(sitetot = sum(newtot)) 
subset_total3 <- subset_total2 %>% left_join(subset_total)
subset_ra <- subset_total3 %>% group_by(date_utc, tax.Genus, uniqcode) %>% summarise(genusra = (newtot / sitetot)*100)
subset_ra <- na.omit(subset_ra)
subset_ra_genus <- subset_ra %>% group_by(tax.Genus, uniqcode) %>% dplyr::summarise(genustot = sum(genusra))
```
```{r}
#Order the Genera and attribtues them a specific color
Genus.order<-c("Achnanthes","Actinocyclus","Amphora","Araphid-pennate_X","Arcocellulus","Asterionellopsis","Asteromphalus","Attheya","Bacillaria","Bellerochea","Biddulphia","Brockmanniella","Cerataulina","Corethron","Coscinodiscus","Cyclotella","Cymbella","Dactyliosolen","Delphineis","Detonula","Ditylum","Entomoneis","Epithemia","Eucampia","Eunotogramma","Fragilariopsis","Guinardia","g__unassigned","Haslea","Helicotheca","Hemiaulus","Hemidiscaceae_X","Lauderia","Licmophora","Licmosphenia","Lithodesmium","Luticola","Mastodiscus","Mastogloia","Meuniera","Minidiscus","Minutocellus","Navicula","Odontella","Palmerina","Papiliocellulus","Planktoniella","Pleurosigma","Polar-centric-Mediophyceae_X","Porosira","Proboscia","Psammodictyon","Raphid-pennate_X","Shionodiscus","Stellarima","Stephanodiscus","Stephanopyxis","Striatella","Surirella","Tabularia","Talaroneis","Thalassionema","Thalassiothrix","Triceratium","Bacteriastrum","Cylindrotheca","Leptocylindrus","Nitzschia","Rhizosolenia","Skeletonema","Pseudo-nitzschia","Thalassiosira","Chaetoceros") 
mycols73 <- c("#99EEFF","#33BBFF","#33DDFF","#086391","#5299E0","#007FFF","#004C99","#0dc9e5","#054261","#9EFADD","#73F1CA","#52E4BB","#3BCFAB","#2BB398","#A0E0F7","#7ECEED","#64B8DE","#4F9CC7","#3E7EA9","#ADBAFA","#899AF1","#6C7EE4","#5667CF","#4352B3","#D8BBFB","#C094F4","#AC74E8","#985CD5","#8548BB","#58156c","#F4C5FD","#EDA7F9","#E380EF","#D863DE","#C44CBF","#b43dd8","#FDC9E1","#FAADCF","#F189B4","#E46C98","#C74F6F","#FCBBBC","#ED7E80","#D75D5F","#E83535","#A93E3F","#8B4513","#A0522D","#A96928","#BD7E32","#CF923E","#DEA54D","#E9B65F","#724407","#F18109","#F29B0F","#F3B516","#F4CF1D","#FBFFB2","#A92A28","#BD3532","#D74945","#E45B55","#ED6F6A","#B8F792","#92ED6A","#6ADE4D","#3EC737","#28A93A","#99C745","#75A12D","#26912A","#1A6E20")
names(mycols73) <- unique(Genus.order)
```
```{r}
ggplot(subset_ra_genus, aes(x=uniqcode, y=genustot, fill = factor(tax.Genus, levels = c(Genus.order)))) + 
        geom_bar(stat='identity', colour="black", size=0.25, ) +  
        theme(legend.position='right') + 
        scale_fill_manual(values = mycols73, "Genus sp.") + 
        guides(fill=guide_legend(ncol=2)) + 
        theme_bw() +
        theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 18, face = "bold", vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=20, face= "bold" ),
              legend.text = element_text(face = "italic", size = 14)) +
        labs(y = "Proportion (%)", 
             x = "")
```

## Figure 4 (CCA)
```{r}
#Calculate relative abundance by family 
bac_RA <- bac_tot %>% group_by(sample, ASV) %>% mutate(RA.percent= (abund_rare / total_bac)*100)
bac_RA <- bac_tot %>% group_by(sample, tax.Family) %>% mutate(RA.fam= (abund_rare / total_bac)*100)
bac_RA2 <- bac_RA %>% group_by(sample, ASV) %>% mutate(proportion= (abund_rare / total_bac))
bac_surf2 <- bac_RA2
#Make an average of the relative abundance of the main bacteria family for the CCA
bac_subset <- bac_surf2 %>% filter(tax.Family %in% c("Rhodobacteraceae", "Marinobacteraceae", "Flavobacteriaceae", "Clade I", "Alteromonadaceae", "Actinomarinaceae"))
bac_subset2 <- ungroup(bac_subset) %>% select("sample", "RA.fam", "tax.Family")
bac_subset2 <- distinct(bac_subset2)
bac_subset2 <- bac_subset2 %>% group_by(sample, tax.Family) %>% dplyr::summarise(RA.fam.sum = sum(RA.fam))
bac_subset2_wide <- bac_subset2 %>% pivot_wider(names_from = tax.Family, values_from = RA.fam.sum, values_fill=0)
bac_subset2_wide2 <- bac_subset2_wide %>% dplyr::mutate(Alteromonadaceae_Marinobacter = mean(Alteromonadaceae + Marinobacteraceae))
```
```{r}
#Left join the bateria average to the diatom file
diatoms_fam <- left_join(diatoms_surf, bac_subset2_wide2)
```
```{r}
#Make a subset with only the column needed 
diatoms_sub <- ungroup(diatoms_fam) %>% dplyr::select("sample", "uniqcode", "date_utc", "GID", "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l","salinity_psu...12", "abund_rare", "Flavobacteriaceae", "Marinobacteraceae", "Rhodobacteraceae", "Clade.I", "Alteromonadaceae", "Alteromonadaceae_Marinobacter", "Actinomarinaceae") %>% spread(key = GID, value = abund_rare, fill=0) 
# Square-root transform all the independent variables for the cca
diatoms_sub$day_length <- sqrt(diatoms_sub$day_length)
diatoms_sub$temperature_deg_c <- sqrt(diatoms_sub$temperature_deg_c)
diatoms_sub$silicate_umol_per_l <- sqrt(diatoms_sub$silicate_umol_per_l)
diatoms_sub$phosphate_umol_per_l <- sqrt(diatoms_sub$phosphate_umol_per_l)
diatoms_sub$nitrate_nitrite_umol_per_l <- sqrt(diatoms_sub$nitrate_nitrite_umol_per_l)
diatoms_sub$ammonium_umol_per_l <- sqrt(diatoms_sub$ammonium_umol_per_l)
diatoms_sub$salinity_psu...12 <- sqrt(diatoms_sub$salinity_psu...12)
diatoms_sub$Flavobacteriaceae <- sqrt(diatoms_sub$Flavobacteriaceae)
diatoms_sub$Marinobacteraceae <- sqrt(diatoms_sub$Marinobacteraceae)
diatoms_sub$Rhodobacteraceae <- sqrt(diatoms_sub$Rhodobacteraceae)
diatoms_sub$Alteromonadaceae <- sqrt(diatoms_sub$Alteromonadaceae)
diatoms_sub$Actinomarinaceae <- sqrt(diatoms_sub$Actinomarinaceae)
diatoms_sub$Alteromonadaceae_Marinobacter <- sqrt(diatoms_sub$Alteromonadaceae_Marinobacter)
diatoms_sub$Clade.I <- sqrt(diatoms_sub$Clade.I)
```
```{r}
#Make a diatoms matrix 
diatoms_sub <- na.omit(diatoms_sub)
diatoms_sub <- diatoms_sub %>% arrange(sample) 
com.matrix <-  as.matrix(diatoms_sub[,-c(1:16)]) 
row.names(com.matrix)<- diatoms_sub$sample
com.matrix.nz <- com.matrix[,colSums(com.matrix)!=0] 
```
```{r}
#Make an environmental data frame 
env_data <- ungroup(diatoms_sub) %>% dplyr::select("sample", "uniqcode", "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l","salinity_psu...12", "Flavobacteriaceae", "Rhodobacteraceae",  "Alteromonadaceae_Marinobacter", "Alteromonadaceae", "Clade.I", "Marinobacteraceae", "Actinomarinaceae") 
env_data <- distinct(env_data)
env_data <- env_data %>% arrange(sample)
rownames(env_data) <- env_data$sample
env_data$uniqcode <- as.factor(env_data$uniqcode)
#Rename the variables
names(env_data)[names(env_data) == "temperature_deg_c"] <- "Temperature"
names(env_data)[names(env_data) == "day_length"] <- "Daylength"
names(env_data)[names(env_data) == "silicate_umol_per_l"] <- "Silicate"
names(env_data)[names(env_data) == "phosphate_umol_per_l"] <- "Phosphate"
names(env_data)[names(env_data) == "nitrate_nitrite_umol_per_l"] <- "Nitrate"
names(env_data)[names(env_data) == "ammonium_umol_per_l"] <- "Ammonium"
names(env_data)[names(env_data) == "salinity_psu...12"] <- "Salinity"
names(env_data)[names(env_data) == "Clade.I"] <- "SAR11"
#Create a new column with the NRS station full name
env_data <- env_data %>% mutate(sites = NA)
env_data$sites[str_detect(env_data$uniqcode, "PHB")] <- "Port Hacking"
env_data$sites[str_detect(env_data$uniqcode, "NSI")] <- "North Stradbroke Island"
env_data$sites[str_detect(env_data$uniqcode, "ROT")] <- "Rottnest Island"
env_data$sites[str_detect(env_data$uniqcode, "KAI")] <- "Kangaroo Island"
env_data$sites[str_detect(env_data$uniqcode, "MAI")] <- "Maria Island"
env_data$sites[str_detect(env_data$uniqcode, "DAR")] <- "Darwin"
env_data$sites[str_detect(env_data$uniqcode, "YON")] <- "Yongala"
env_data$sites <- as.factor(env_data$sites)
env_data$sites <- factor(env_data$sites, levels =rev(c("Maria Island", "Kangaroo Island", "Port Hacking","Rottnest Island", "North Stradbroke Island", "Yongala", "Darwin")))
```
```{r}
#Run the CCA
cca.1 <- cca(com.matrix.nz ~ uniqcode + Temperature + Daylength + Silicate + Phosphate +  Nitrate + Ammonium + Salinity + Rhodobacteraceae + Alteromonadaceae_Marinobacter + Flavobacteriaceae, data=env_data) 
```
```{r}
library(goeveg)
##Select the top 10% most frequent species with 60% best fitting
cca_env <- envfit(cca.1, env_data[,2:10], choices=c(1,3))
ASV_bestfit <- ordiselect(com.matrix.nz, cca.1, ablim = 0.08, fitlim = 0.6, method = "vars", env = cca_env)
ASV_bestfitb <- as.data.frame(ASV_bestfit)
ASV_bestfitb <- as.data.frame(str_replace_all(ASV_bestfitb$ASV_bestfit, "[.]", ";"))
colnames(ASV_bestfitb) <- c("GID")
```
```{r}
ASV.order3 <- c("euk;Skeletonema;Eb1000789","euk;Skeletonema;Eb1001219","euk;Thalassiosira;Eb1000926","euk;Chaetoceros;Eb1002525","euk;Chaetoceros;Eb1001502","euk;Skeletonema;Eb1000779","euk;Rhizosolenia;Eb1001509","euk;Brockmanniella;Eb1000427","euk;Thalassiosira;Eb1000094","euk;Cerataulina;Eb1000702","euk;Minidiscus;Eb1000338","euk;Proboscia;Eb1000604","euk;Leptocylindrus;Eb1000086","euk;Skeletonema;Eb1000106","euk;Skeletonema;Eb1000520","euk;Skeletonema;Eb1000172","euk;Thalassiosira;Eb1000892","euk;Leptocylindrus;Eb1000190","euk;Chaetoceros;Eb1000724","euk;Guinardia;Eb1000907","euk;Rhizosolenia;Eb1000541","euk;Cylindrotheca;Eb1001240","euk;Cylindrotheca;Eb1000744","euk;Chaetoceros;Eb1001960","euk;Guinardia;Eb1001573","euk;Chaetoceros;Eb1000827","euk;Chaetoceros;Eb1001731","euk;Chaetoceros;Eb1002800","euk;Bacteriastrum;Eb1000935","euk;Eucampia;Eb1000686","euk;Chaetoceros;Eb1001275","euk;Chaetoceros;Eb1002318","euk;Chaetoceros;Eb1001313","euk;Skeletonema;Eb1000943","euk;Bacteriastrum;Eb1001530","euk;Cerataulina;Eb1000684","euk;Proboscia;Eb1001601","euk;Bacteriastrum;Eb1001648","euk;Bacteriastrum;Eb1002598","euk;Bacteriastrum;Eb1001854","euk;Nitzschia;Eb1001436","euk;Bacteriastrum;Eb1002531","euk;Minidiscus;Eb1000092","euk;Chaetoceros;Eb1003520","euk;Minutocellus;Eb1000151","euk;Palmerina;Eb1007296","euk;Cylindrotheca;Eb1000511","euk;Cylindrotheca;Eb1002909","euk;Skeletonema;Eb1001523","euk;Skeletonema;Eb1006123","euk;Navicula;Eb1002331")
```
```{r}
#Extract the data to plot the CCA
#Check the attributes
scrs <- scores(cca.1,display=c("sp","wa","lc","bp","cn"))
attributes(scrs)
#Extract data and set up vectors for arrows - SITES
df_sites <- data.frame(scrs$sites) 
df_sites <- rownames_to_column(df_sites, "sample")
#Extract data and set up vectors for arrows - SPECIES (ASVs)
df_species <- data.frame(scrs$species)
df_species_arrow <- rownames_to_column(df_species, "labels")
#Extract data and set up vectors for arrows - ENV VAR
df_biplot <- data.frame(scrs$biplot)
df_biplot_arrow <- rownames_to_column(df_biplot, "labels")
df_env_arrow <- df_biplot_arrow %>% filter(labels %in% c("Temperature", "Silicate", "Phosphate", "Nitrate", "Ammonium", "Salinity", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter")) 
df_uniqcode_arrow <- df_biplot_arrow %>% filter(labels %in% c("uniqcodeYON", "uniqcodeNSI", "uniqcodeROT", "uniqcodePHB", "uniqcodeKAI", "uniqcodeMAI"))
#Format the arrows 
arrowhead = arrow(length = unit(0.2, "cm"))
#To filter and select the 10% most abundant and 60% best fitting 
#ASVssp <- df_species_arrow %>% filter(labels %in% ASV_bestfitb$GID )
#writexl::write_xlsx(ASVssp, "ASVs_selection_CCA_211121_8per.xlsx")
sp3 <- read_excel("~/ASVs_selection_CCA_211121_8per.xlsx")
mycolv<- sp3$col
names(mycolv) <- sp3$Label
```
```{r}
#Plot the CCA using ggplot
p1 <- ggplot(df_sites, aes(x = CCA1, y = CCA2)) + 
  geom_point(data = df_sites, aes(colour = env_data$uniqcode), size = 5, pch =16) +
  geom_segment(data = df_env_arrow, aes(x = 0, y = 0, xend = CCA1, yend = CCA2), 
               arrow = arrowhead, size = 1, colour = "black") + 
  geom_point(data = sp3, aes(x=CCA1, y =CCA2, fill = factor(Label, levels = c(ASV.order3))), size = 4, pch = 22) +  
  geom_text(data = df_env_arrow, aes(x=1.8 *CCA1,y=1.8 *CCA2,label=labels), size=5) + 
  geom_abline(intercept = 0,slope = 0,linetype="dashed", size=0.8) + 
  geom_vline(aes(xintercept=0), linetype="dashed", size=0.8) + 
  coord_fixed() +
  scale_fill_manual("ASVid", values = mycolv) +
  scale_colour_brewer("NRS station", palette = "Set1") +
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=2)) + 
  theme(legend.justification = c(0,0), axis.text = element_text(family = "Arial",  colour = "black", size = 20),
        axis.title = element_text(family = "Arial", size = 25),
        text = element_text(family = "Arial", size = 20)) +
  theme_bw(base_size = 15) 
```
## Figure 5A (dissimilarity month lag)
```{r}
#Make a subset with only the column needed
diatoms_sub <- ungroup(diatoms_surf) %>% select("sample", "uniqcode", "date_utc", "GID", "depth_m", "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "RA.percent", "year", "month", "month.abb") %>% spread(key = GID, value = RA.percent, fill=0)
# Square-root transform all the independent variables 
diatoms_sub$day_length <- sqrt(diatoms_sub$day_length)
diatoms_sub$temperature_deg_c <- sqrt(diatoms_sub$temperature_deg_c)
diatoms_sub$silicate_umol_per_l <- sqrt(diatoms_sub$silicate_umol_per_l)
diatoms_sub$phosphate_umol_per_l <- sqrt(diatoms_sub$phosphate_umol_per_l)
diatoms_sub$nitrate_nitrite_umol_per_l <- sqrt(diatoms_sub$nitrate_nitrite_umol_per_l)
diatoms_sub$ammonium_umol_per_l <- sqrt(diatoms_sub$ammonium_umol_per_l)
#Make a diatoms matrix 
diatoms_sub <- na.omit(diatoms_sub)
diatoms_sub <- diatoms_sub[order(diatoms_sub$sample),]
com.matrix <-  as.matrix(diatoms_sub[,-c(1:13)]) 
row.names(com.matrix)<- paste0(diatoms_sub$sample)
com.matrix.nz <- com.matrix[,colSums(com.matrix)!=0] 
#Make an environmental data frame 
env_data <- ungroup(diatoms_sub) %>% select("uniqcode","sample",  "day_length", "temperature_deg_c", "silicate_umol_per_l", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "date_utc", "year", "month.abb")
env_data <- distinct(env_data)
env_data <- env_data[order(env_data$sample),]
env_data$uniqcode <- as.factor(env_data$uniqcode)
```
```{r}
#Make a Bray-Curtis dissimilarity matrix
diatoms_bc <- vegdist(com.matrix.nz, method = "bray")
bc_matrix <- as.matrix(diatoms_bc)
bc_df_matrix <- as.data.frame(bc_matrix)
```
```{r, fig.height=5, fig.width=3}
nine <- bc_df_matrix
nine$sample <- colnames(nine) # but we know that the rownames are in the same order as the column 
ninelonger <- nine %>%  pivot_longer(-sample, names_to = 'sample2', values_to = 'pwd') # pivot longer to get 3 columns
#convert date to year and month columns
MMmetacmy <- diatoms_sub %>% select(sample, year, month) 
MMmetacmy$sample <- as.character(MMmetacmy$sample)
# Create the sequence
MMmetacmy$month <- as.numeric(MMmetacmy$month)
MMmetacmy$monthSeq <- MMmetacmy$month + ((MMmetacmy$year-2015)*12)
#add the month sequence  for the 1st sample ('sample')
ninelonger <- ninelonger %>% left_join(MMmetacmy %>%  select(sample, monthSeq))
ninelonger <- ninelonger %>% left_join(MMmetacmy %>%  select(sample, monthSeq) %>% dplyr::rename(sample2 = sample, monthSeq2 = monthSeq))
#calculate the month difference for binning (Anna ?)
ninelonger$diff <- ninelonger$monthSeq2 - ninelonger$monthSeq
#add uniqcode to help faceting
MMmeta  <- diatoms_sub %>% select(sample, uniqcode) 
MMmeta$sample <- as.character(MMmeta$sample)
MMmeta <- unique(MMmeta)
ninelonger <- unique(ninelonger)
ninelonger <- ninelonger %>% left_join(MMmeta %>% select(sample, uniqcode))
#But we can only compare samples within each site
colnames(MMmeta) <- c('sample2' , 'uniqcode2')
ninelonger <- ninelonger %>% left_join(MMmeta)
nineabitshorter4 <- ninelonger %>% filter (uniqcode == uniqcode2)
```
```{r, fig.height=5, fig.width=3}
#plot the summary statistics 
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE)) ##na.rm = remove NA or not
}
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- rename(data_sum, c("mean" = varname))
 return(data_sum)
}

##count = n(x[[col]], na.rm=TRUE))
n <- nineabitshorter4 %>% filter(diff>0) %>% group_by(uniqcode,diff) %>%  select(uniqcode,diff) %>% table()
n2 <- as.data.frame(n)
n2$diff <- as.numeric(n2$diff)

df2 <- data_summary(nineabitshorter4 %>% filter (diff > 0) , varname="pwd", 
                    groupnames=c("diff", "uniqcode"))

df3 <- df2 %>% left_join(n2, by = c("uniqcode", "diff"))

df3$uniqcode <- factor(df3$uniqcode, levels =rev(c("MAI", "KAI", "PHB","ROT", "NSI", "YON", "DAR")))

#extra filtration step eventually
df4 <- df3 %>% filter(diff <= 36)
df5 <- df4 %>% dplyr::mutate(sim = 1 - pwd)
df5 <- df5 %>% dplyr::mutate(perc = sim*100)
```
```{r, fig.height=5, fig.width=5}
ggplot(df5 %>% filter(uniqcode %in% c("NSI", "PHB","MAI") ), aes(x=diff, y=perc, fill = uniqcode)) + 
    geom_bar(stat = "identity", colour = "black") + 
    scale_fill_manual(values = c("#4DAF4A", "#FF7F00", "#A65628")) + 
    scale_x_continuous(breaks = seq(0, 55, by = 12)) + #34 for 3 sites / 55 for 7 sites, 
    facet_grid(uniqcode ~ ., scales='free') + 
    theme_bw() +
    theme(legend.position='none') + 
    labs(x = "Time lag (years apart)",
         y = "Mean Bray-Curtis (%) similarity")
```

## Figure 5B (barplot - Genera RA/sites/month) 
```{r}
diatoms_surf <- diatoms_rare %>% filter(depth_m == 2)
subset <-  diatoms_surf %>% select("tax.Genus", "sample", "abund_rare", "uniqcode", "date_utc")
subset <- subset %>% separate(date_utc, c("year", "month", "day"), remove=F, sep= "-")
subset_total <- subset %>% group_by(month, tax.Genus, uniqcode) %>% dplyr::summarise(newtot = sum(abund_rare))
subset_total2 <- subset_total %>% group_by(uniqcode, month) %>% dplyr::summarise(sitetot = sum(newtot)) 
subset_total3 <- subset_total2 %>% left_join(subset_total)
subset_ra_month <- subset_total3 %>% group_by(month, tax.Genus, uniqcode) %>% dplyr::summarise(monthtot = (newtot / sitetot)*100)
#subset2 <- subset %>% group_by(month, tax.Genus, uniqcode) %>% dplyr::summarise(monthtot = sum(abund_rare))
subset_ra_month$month.abb <- factor(month.abb[as.integer(subset_ra_month$month)], levels=c("Jan", "Feb","Mar", "Apr","May",  "Jun", "Jul","Aug","Sep","Oct","Nov", "Dec"))
subset_ra_month$uniqcode <- factor(subset_ra_month$uniqcode, levels =rev(c("MAI", "KAI", "PHB","ROT", "NSI", "YON", "DAR")))
```
```{r}
#Same colors and order as Figure 3
Genus.order<-c("Achnanthes","Actinocyclus","Amphora","Araphid-pennate_X","Arcocellulus","Asterionellopsis","Asteromphalus","Attheya","Bacillaria","Bellerochea","Biddulphia","Brockmanniella","Cerataulina","Corethron","Coscinodiscus","Cyclotella","Cymbella","Dactyliosolen","Delphineis","Detonula","Ditylum","Entomoneis","Epithemia","Eucampia","Eunotogramma","Fragilariopsis","Guinardia","g__unassigned","Haslea","Helicotheca","Hemiaulus","Hemidiscaceae_X","Lauderia","Licmophora","Licmosphenia","Lithodesmium","Luticola","Mastodiscus","Mastogloia","Meuniera","Minidiscus","Minutocellus","Navicula","Odontella","Palmerina","Papiliocellulus","Planktoniella","Pleurosigma","Polar-centric-Mediophyceae_X","Porosira","Proboscia","Psammodictyon","Raphid-pennate_X","Shionodiscus","Stellarima","Stephanodiscus","Stephanopyxis","Striatella","Surirella","Tabularia","Talaroneis","Thalassionema","Thalassiothrix","Triceratium","Bacteriastrum","Cylindrotheca","Leptocylindrus","Nitzschia","Rhizosolenia","Skeletonema","Pseudo-nitzschia","Thalassiosira","Chaetoceros") 
mycols73 <- c("#99EEFF","#33BBFF","#33DDFF","#086391","#5299E0","#007FFF","#004C99","#0dc9e5","#054261","#9EFADD","#73F1CA","#52E4BB","#3BCFAB","#2BB398","#A0E0F7","#7ECEED","#64B8DE","#4F9CC7","#3E7EA9","#ADBAFA","#899AF1","#6C7EE4","#5667CF","#4352B3","#D8BBFB","#C094F4","#AC74E8","#985CD5","#8548BB","#58156c","#F4C5FD","#EDA7F9","#E380EF","#D863DE","#C44CBF","#b43dd8","#FDC9E1","#FAADCF","#F189B4","#E46C98","#C74F6F","#FCBBBC","#ED7E80","#D75D5F","#E83535","#A93E3F","#8B4513","#A0522D","#A96928","#BD7E32","#CF923E","#DEA54D","#E9B65F","#724407","#F18109","#F29B0F","#F3B516","#F4CF1D","#FBFFB2","#A92A28","#BD3532","#D74945","#E45B55","#ED6F6A","#B8F792","#92ED6A","#6ADE4D","#3EC737","#28A93A","#99C745","#75A12D","#26912A","#1A6E20")
names(mycols73) <- unique(Genus.order)
```
```{r}
ggplot(subset_ra_month %>% filter(uniqcode %in% c("PHB", "MAI", "NSI")), aes(x= month.abb, y=monthtot, fill = factor(tax.Genus, levels = c(Genus.order)))) + 
        geom_bar(stat='identity', colour="black", size=0.25) +   
        facet_grid(. ~ uniqcode, scales = 'free_y') +
        theme(legend.position='right') + 
        scale_fill_manual(values = mycols73, "Genera") +
        guides(fill=guide_legend(ncol=2)) +     
        theme_bw() +
        theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 18, face = "bold", angle = 65, vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=20, face= "bold" ),
              legend.text = element_text(face = "italic", size = 14)) +
         labs(y = "Proportion (%)", x = "")
```

## Figure 6 (Seasonality CCA)
```{r}
diatoms_fam$season <- factor(diatoms_fam$season, levels=c("summer", "autumn", "winter", "spring"))
NSI <- diatoms_fam %>% filter(uniqcode == "NSI")
PHB <- diatoms_fam %>% filter(uniqcode == "PHB")
MAI <- diatoms_fam %>% filter(uniqcode == "MAI")
```
North Stradbroke Island
```{r}
NSI_sub <- ungroup(NSI) %>% filter(!sample %in% c( "139769")) %>% select("sample", "date_utc", "GID", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "abund_rare", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season") %>%  spread(key = GID, value = abund_rare, fill=0)  #"35700", "139763",

NSI_sub$day_length <- sqrt(NSI_sub$day_length)
NSI_sub$temperature_deg_c <- sqrt(NSI_sub$temperature_deg_c)
NSI_sub$silicate_umol_per_l <- sqrt(NSI_sub$silicate_umol_per_l)
NSI_sub$salinity_psu...12 <- sqrt(NSI_sub$salinity_psu...12)
NSI_sub$phosphate_umol_per_l <- sqrt(NSI_sub$phosphate_umol_per_l)
NSI_sub$nitrate_nitrite_umol_per_l <- sqrt(NSI_sub$nitrate_nitrite_umol_per_l)
NSI_sub$ammonium_umol_per_l <- sqrt(NSI_sub$ammonium_umol_per_l)
NSI_sub$Flavobacteriaceae <- sqrt(NSI_sub$Flavobacteriaceae)
NSI_sub$Rhodobacteraceae <- sqrt(NSI_sub$Rhodobacteraceae)
NSI_sub$Alteromonadaceae_Marinobacter <- sqrt(NSI_sub$Alteromonadaceae_Marinobacter)
NSI_sub <- na.omit(NSI_sub)

com.matrix.nsi <-  as.matrix(NSI_sub[,-c(1:15)]) 
row.names(com.matrix.nsi)<- NSI_sub$sample
com.matrix.nsi.nz <- com.matrix.nsi[,colSums(com.matrix.nsi)!=0]

env_data_NSI <- ungroup(NSI_sub) %>% select("sample", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "date_utc", "ammonium_umol_per_l", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season")
env_data_NSI <- distinct(env_data_NSI)
names(env_data_NSI)[names(env_data_NSI) == "temperature_deg_c"] <- "Temperature"
names(env_data_NSI)[names(env_data_NSI) == "day_length"] <- "Daylength"
names(env_data_NSI)[names(env_data_NSI) == "silicate_umol_per_l"] <- "Silicate"
names(env_data_NSI)[names(env_data_NSI) == "salinity_psu...12"] <- "Salinity"
names(env_data_NSI)[names(env_data_NSI) == "phosphate_umol_per_l"] <- "Phosphate"
names(env_data_NSI)[names(env_data_NSI) == "nitrate_nitrite_umol_per_l"] <- "Nitrate"
names(env_data_NSI)[names(env_data_NSI) == "ammonium_umol_per_l"] <- "Ammonium"
names(env_data_NSI)[names(env_data_NSI) == "date_utc"] <- "Date"
```
```{r}
cca_NSI <- cca(com.matrix.nsi.nz ~ Temperature + Daylength + Silicate + Phosphate +  Nitrate + Ammonium + Salinity + Rhodobacteraceae + Alteromonadaceae_Marinobacter + Flavobacteriaceae, data=env_data_NSI) 
```
```{r}
##Select the top 10% most frequent species with 60% best fitting 
cca_NSI_env <- envfit(cca_NSI, env_data_NSI[,c("Temperature","Daylength","Silicate","Phosphate","Nitrate","Ammonium","Salinity","Rhodobacteraceae","Alteromonadaceae_Marinobacter","Flavobacteriaceae")], choices=c(1,3))
ASV_bestfit_NSI <- ordiselect(com.matrix.nsi.nz, cca_NSI, ablim = 0.08, fitlim = 0.6, method = "vars", env = cca_NSI_env)
ASV_bestfit_NSI_b <- as.data.frame(ASV_bestfit_NSI)
ASV_bestfit_NSI_b <- as.data.frame(str_replace_all(ASV_bestfit_NSI_b$ASV_bestfit_NSI, "[.]", ";"))
colnames(ASV_bestfit_NSI_b) <- c("GID")
```
```{r}
#Extract the data to plot the CCA
#Check the attributes
scrs <- scores(cca_NSI,display=c("sp","wa","lc","bp","cn"))
attributes(scrs)
#Extract data and set up vectors for arrows - SITES
df_sites <- data.frame(scrs$sites) #,t(as.data.frame(strsplit(rownames(scrs$sites),"_")))
df_sites <- rownames_to_column(df_sites, "sample")
env_data_NSI$sample <- as.character(env_data_NSI$sample)
df_sites <- left_join(df_sites,env_data_NSI , by = "sample")
#Extract data and set up vectors for arrows - SPECIES (ASVs)
df_species <- data.frame(scrs$species)
df_species_arrow <- rownames_to_column(df_species, "labels")
#Extract data and set up vectors for arrows - ENV VAR
df_biplot <- data.frame(scrs$biplot)
df_biplot_arrow <- rownames_to_column(df_biplot, "labels")
df_env_arrow <- df_biplot_arrow %>% filter(labels %in% c("Temperature", "Silicate", "Phosphate", "Daylength", "Nitrate", "Ammonium", "Salinity", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season")) 
#Format the arrows 
arrowhead = arrow(length = unit(0.2, "cm"))
#To filter and select the 10% most abundant and 60% best fitting 
ASVssp_nsi <- df_species_arrow %>% filter(labels %in% ASV_bestfit_NSI_b$GID )
#writexl::write_xlsx(ASVssp_nsi, "ASVs_selection_CCAseason_NSI_121221_8per.xlsx")
sp_NSI <- read_excel("~/ASVs_selection_CCAseason_NSI_121221_8per.xlsx")
mycolv.NSI<- sp_NSI$col
names(mycolv.NSI) <- sp_NSI$Label

ASV.order.NSI <- c("euk;Bacteriastrum;Eb1000935","euk;Bacteriastrum;Eb1001648","euk;Bacteriastrum;Eb1001530","euk;Bacteriastrum;Eb1002598","euk;Chaetoceros;Eb1000043","euk;Chaetoceros;Eb1001275","euk;Leptocylindrus;Eb1000190","euk;Rhizosolenia;Eb1000407","euk;Skeletonema;Eb1000943","euk;Eucampia;Eb1000686","euk;Leptocylindrus;Eb1000086","euk;Cerataulina;Eb1000684","euk;Proboscia;Eb1001601","euk;Rhizosolenia;Eb1000541","euk;Guinardia;Eb1000907","euk;Chaetoceros;Eb1000827","euk;Chaetoceros;Eb1001731","euk;Thalassiosira;Eb1000094","euk;Minidiscus;Eb1000338")

#Plot the CCA using ggplot
ggplot(df_sites, aes(x = CCA1, y = CCA2)) + 
  geom_point(data = df_sites, aes(colour = as.factor(season)), size = 6) + #pch =16
  geom_segment(data = df_env_arrow, aes(x = 0, y = 0, xend = CCA1, yend = CCA2), 
                arrow = arrowhead, size = 1, colour = "black") + 
  geom_text(data = df_env_arrow, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) + 
  geom_point(data = sp_NSI, aes(x=CCA1, y =CCA2, fill = factor(Label, levels = c(ASV.order.NSI))), size = 4, pch = 22) + # 
  #geom_text(data = ASVssp_NSI, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) +
  geom_abline(intercept = 0,slope = 0,linetype="dashed", size=0.8) + 
  geom_vline(aes(xintercept=0), linetype="dashed", size=0.8) +
  scale_colour_manual("Season", values = c("#FF0000", "#998033", "#0B5394","#51A52D"), limits = c("summer", "autumn", "winter", "spring")) +
  scale_fill_manual("ASVid", values = mycolv.NSI) +
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=1)) + 
  theme(legend.justification = c(0,0), axis.text = element_text(family = "Arial",  colour = "black", size = 20),
        axis.title = element_text(family = "Arial", size = 25),
        text = element_text(family = "Arial", size = 20)) +
  stat_ellipse(aes(group = season, colour = season),level=0.8) +
  theme_bw(base_size = 15) +
  labs(title = "NSI")
```
Port Hacking
```{r}
PHB_sub <- ungroup(PHB) %>% select("sample", "date_utc", "GID", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "abund_rare", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season") %>%  spread(key = GID, value = abund_rare, fill=0) 

PHB_sub$day_length <- sqrt(PHB_sub$day_length)
PHB_sub$temperature_deg_c <- sqrt(PHB_sub$temperature_deg_c)
PHB_sub$silicate_umol_per_l <- sqrt(PHB_sub$silicate_umol_per_l)
PHB_sub$salinity_psu...12 <- sqrt(PHB_sub$salinity_psu...12)
PHB_sub$phosphate_umol_per_l <- sqrt(PHB_sub$phosphate_umol_per_l)
PHB_sub$nitrate_nitrite_umol_per_l <- sqrt(PHB_sub$nitrate_nitrite_umol_per_l)
PHB_sub$ammonium_umol_per_l <- sqrt(PHB_sub$ammonium_umol_per_l)
PHB_sub$Flavobacteriaceae <- sqrt(PHB_sub$Flavobacteriaceae)
PHB_sub$Rhodobacteraceae <- sqrt(PHB_sub$Rhodobacteraceae)
PHB_sub$Alteromonadaceae_Marinobacter <- sqrt(PHB_sub$Alteromonadaceae_Marinobacter)
PHB_sub <- na.omit(PHB_sub)

com.matrix.PHB <-  as.matrix(PHB_sub[,-c(1:15)]) 
row.names(com.matrix.PHB)<- PHB_sub$sample
com.matrix.PHB.nz <- com.matrix.PHB[,colSums(com.matrix.PHB)!=0]

env_data_PHB <- ungroup(PHB_sub) %>% select("sample", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "date_utc", "ammonium_umol_per_l", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season")
env_data_PHB <- distinct(env_data_PHB)
names(env_data_PHB)[names(env_data_PHB) == "temperature_deg_c"] <- "Temperature"
names(env_data_PHB)[names(env_data_PHB) == "day_length"] <- "Daylength"
names(env_data_PHB)[names(env_data_PHB) == "silicate_umol_per_l"] <- "Silicate"
names(env_data_PHB)[names(env_data_PHB) == "salinity_psu...12"] <- "Salinity"
names(env_data_PHB)[names(env_data_PHB) == "phosphate_umol_per_l"] <- "Phosphate"
names(env_data_PHB)[names(env_data_PHB) == "nitrate_nitrite_umol_per_l"] <- "Nitrate"
names(env_data_PHB)[names(env_data_PHB) == "ammonium_umol_per_l"] <- "Ammonium"
names(env_data_PHB)[names(env_data_PHB) == "date_utc"] <- "Date"
```
```{r}
cca_PHB <- cca(com.matrix.PHB.nz ~ Temperature + Daylength + Silicate + Phosphate +  Nitrate + Ammonium + Salinity + Rhodobacteraceae + Alteromonadaceae_Marinobacter + Flavobacteriaceae, data=env_data_PHB) 
```
```{r}
##Select the top 10% most frequent species with 60% best fitting 
cca_PHB_env <- envfit(cca_PHB, env_data_PHB[,c("Temperature","Daylength","Silicate","Phosphate","Nitrate","Ammonium","Salinity","Rhodobacteraceae","Alteromonadaceae_Marinobacter","Flavobacteriaceae")], choices=c(1,3))
ASV_bestfit_PHB <- ordiselect(com.matrix.PHB.nz, cca_PHB, ablim = 0.08, fitlim = 0.6, method = "vars", env = cca_PHB_env)
ASV_bestfit_PHB_b <- as.data.frame(ASV_bestfit_PHB)
ASV_bestfit_PHB_b <- as.data.frame(str_replace_all(ASV_bestfit_PHB_b$ASV_bestfit_PHB, "[.]", ";"))
colnames(ASV_bestfit_PHB_b) <- c("GID")
```
```{r}
#PLOT the CCA
#Check the attributes
scrs <- scores(cca_PHB,display=c("sp","wa","lc","bp","cn"))
attributes(scrs)
#Extract data and set up vectors for arrows - SITES
df_sites <- data.frame(scrs$sites) #,t(as.data.frame(strsplit(rownames(scrs$sites),"_")))
df_sites <- rownames_to_column(df_sites, "sample")
env_data_PHB$sample <- as.character(env_data_PHB$sample)
df_sites <- left_join(df_sites,env_data_PHB , by = "sample")
#Extract data and set up vectors for arrows - SPECIES (ASVs)
df_species <- data.frame(scrs$species)
df_species_arrow <- rownames_to_column(df_species, "labels")
#Extract data and set up vectors for arrows - ENV VAR
df_biplot <- data.frame(scrs$biplot)
df_biplot_arrow <- rownames_to_column(df_biplot, "labels")
df_env_arrow <- df_biplot_arrow %>% filter(labels %in% c("Temperature", "Daylength", "Silicate", "Phosphate", "Nitrate", "Ammonium", "Salinity", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season")) 
#Format the arrows 
arrowhead = arrow(length = unit(0.2, "cm"))
#To filter and select the 10% most abundant and 60% best fitting 
ASVssp_phb <- df_species_arrow %>% filter(labels %in% ASV_bestfit_PHB_b$GID )
#writexl::write_xlsx(ASVssp_phb, "ASVs_selection_CCAseason_PHB_121221_8per.xlsx")
sp_PHB <- read_excel("~/ASVs_selection_CCAseason_PHB_121221_8per.xlsx")
mycolv.PHB<- sp_PHB$col
names(mycolv.PHB) <- sp_PHB$Label

ASV.order.PHB <- c("euk;Thalassiosira;Eb1006520","euk;Thalassiosira;Eb1000094","euk;Detonula;Eb1002864","euk;Chaetoceros;Eb1000724","euk;Minidiscus;Eb1000192","euk;Minidiscus;Eb1000092","euk;Skeletonema;Eb1000106","euk;Skeletonema;Eb1001184","euk;Skeletonema;Eb1001438","euk;Cyclotella;Eb1000297","euk;Guinardia;Eb1001443","euk;Thalassiosira;Eb1000892","euk;Proboscia;Eb1000604","euk;Cylindrotheca;Eb1000744","euk;Cerataulina;Eb1000702","euk;Skeletonema;Eb1000520","euk;Cerataulina;Eb1000208","euk;Leptocylindrus;Eb1000190")


#Plot the CCA using ggplot
ggplot(df_sites, aes(x = CCA1, y = CCA2)) + 
  geom_point(data = df_sites, aes(colour = as.factor(season)), size = 6) + #pch =16
  geom_segment(data = df_env_arrow, aes(x = 0, y = 0, xend = CCA1, yend = CCA2), 
                arrow = arrowhead, size = 1, colour = "black") + 
  geom_text(data = df_env_arrow, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) + 
  geom_point(data = sp_PHB, aes(x=CCA1, y =CCA2, fill = factor(Label, levels = c(ASV.order.PHB))), size = 4, pch = 22) + # 
  #geom_text(data = ASVssp_phb, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) +
  geom_abline(intercept = 0,slope = 0,linetype="dashed", size=0.8) + 
  geom_vline(aes(xintercept=0), linetype="dashed", size=0.8) +
  scale_colour_manual("Season", values = c("#FF0000", "#998033", "#0B5394","#51A52D"), limits = c("summer", "autumn", "winter", "spring")) +
  scale_fill_manual("ASVid", values = mycolv.PHB) +
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=1)) + 
  theme(legend.justification = c(0,0), axis.text = element_text(family = "Arial",  colour = "black", size = 20),
        axis.title = element_text(family = "Arial", size = 25),
        text = element_text(family = "Arial", size = 20)) +
  stat_ellipse(aes(group = season, colour = season),level=0.8) +
  theme_bw(base_size = 15) +
  labs(title = "PHB")
```
Maria Island
```{r}
MAI_sub <- ungroup(MAI) %>% select("sample", "date_utc", "GID", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "abund_rare", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season") %>%  spread(key = GID, value = abund_rare, fill=0) 

MAI_sub$day_length <- sqrt(MAI_sub$day_length)
MAI_sub$temperature_deg_c <- sqrt(MAI_sub$temperature_deg_c)
MAI_sub$silicate_umol_per_l <- sqrt(MAI_sub$silicate_umol_per_l)
MAI_sub$salinity_psu...12 <- sqrt(MAI_sub$salinity_psu...12)
MAI_sub$phosphate_umol_per_l <- sqrt(MAI_sub$phosphate_umol_per_l)
MAI_sub$nitrate_nitrite_umol_per_l <- sqrt(MAI_sub$nitrate_nitrite_umol_per_l)
MAI_sub$ammonium_umol_per_l <- sqrt(MAI_sub$ammonium_umol_per_l)
MAI_sub$Flavobacteriaceae <- sqrt(MAI_sub$Flavobacteriaceae)
MAI_sub$Rhodobacteraceae <- sqrt(MAI_sub$Rhodobacteraceae)
MAI_sub$Alteromonadaceae_Marinobacter <- sqrt(MAI_sub$Alteromonadaceae_Marinobacter)
MAI_sub <- na.omit(MAI_sub)

com.matrix.MAI <-  as.matrix(MAI_sub[,-c(1:15)]) 
row.names(com.matrix.MAI)<- MAI_sub$sample
com.matrix.MAI.nz <- com.matrix.MAI[,colSums(com.matrix.MAI)!=0]

env_data_MAI <- ungroup(MAI_sub) %>% select("sample", "day_length", "temperature_deg_c", "silicate_umol_per_l","salinity_psu...12", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "date_utc", "ammonium_umol_per_l", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season", "year", "season")
env_data_MAI <- distinct(env_data_MAI)
names(env_data_MAI)[names(env_data_MAI) == "temperature_deg_c"] <- "Temperature"
names(env_data_MAI)[names(env_data_MAI) == "day_length"] <- "Daylength"
names(env_data_MAI)[names(env_data_MAI) == "silicate_umol_per_l"] <- "Silicate"
names(env_data_MAI)[names(env_data_MAI) == "salinity_psu...12"] <- "Salinity"
names(env_data_MAI)[names(env_data_MAI) == "phosphate_umol_per_l"] <- "Phosphate"
names(env_data_MAI)[names(env_data_MAI) == "nitrate_nitrite_umol_per_l"] <- "Nitrate"
names(env_data_MAI)[names(env_data_MAI) == "ammonium_umol_per_l"] <- "Ammonium"
names(env_data_MAI)[names(env_data_MAI) == "date_utc"] <- "Date"
```
```{r}
cca_MAI <- cca(com.matrix.MAI.nz ~ Temperature + Daylength + Silicate + Phosphate +  Nitrate + Ammonium + Salinity + Rhodobacteraceae + Alteromonadaceae_Marinobacter + Flavobacteriaceae, data=env_data_MAI) 
```
```{r}
##Select the top 10% most frequent species with 60% best fitting 
cca_MAI_env <- envfit(cca_MAI, env_data_MAI[,c("Temperature","Daylength","Silicate","Phosphate","Nitrate","Ammonium","Salinity","Rhodobacteraceae","Alteromonadaceae_Marinobacter","Flavobacteriaceae")], choices=c(1,3))
ASV_bestfit_MAI <- ordiselect(com.matrix.MAI.nz, cca_MAI, ablim = 0.08, fitlim = 0.6, method = "vars", env = cca_MAI_env)
ASV_bestfit_MAI_b <- as.data.frame(ASV_bestfit_MAI)
ASV_bestfit_MAI_b <- as.data.frame(str_replace_all(ASV_bestfit_MAI_b$ASV_bestfit_MAI, "[.]", ";"))
colnames(ASV_bestfit_MAI_b) <- c("GID")
```
```{r}
#PLOT the CCA
#Check the attributes
scrs <- scores(cca_MAI,display=c("sp","wa","lc","bp","cn"))
attributes(scrs)
#Extract data and set up vectors for arrows - SITES
df_sites <- data.frame(scrs$sites) #,t(as.data.frame(strsplit(rownames(scrs$sites),"_")))
df_sites <- rownames_to_column(df_sites, "sample")
env_data_MAI$sample <- as.character(env_data_MAI$sample)
df_sites <- left_join(df_sites,env_data_MAI, by = "sample")
#Extract data and set up vectors for arrows - SPECIES (ASVs)
df_species <- data.frame(scrs$species)
df_species_arrow <- rownames_to_column(df_species, "labels")
#Extract data and set up vectors for arrows - ENV VAR
df_biplot <- data.frame(scrs$biplot)
df_biplot_arrow <- rownames_to_column(df_biplot, "labels")
df_env_arrow <- df_biplot_arrow %>% filter(labels %in% c("Temperature","Daylength", "Silicate", "Phosphate", "Nitrate", "Ammonium", "Salinity", "Flavobacteriaceae",  "Rhodobacteraceae", "Alteromonadaceae_Marinobacter", "year_season")) 
#Format the arrows 
arrowhead = arrow(length = unit(0.2, "cm"))
#To filter and select the 10% most abundant and 60% best fitting 
ASVssp_mai <- df_species_arrow %>% filter(labels %in% ASV_bestfit_MAI_b$GID )
#writexl::write_xlsx(ASVssp_mai, "ASVs_selection_CCAseason_MAI_121221_8per.xlsx")
sp_mai <- read_excel("~/ASVs_selection_CCAseason_MAI_121221_8per.xlsx")
mycolv.mai<- sp_mai$col
names(mycolv.mai) <- sp_mai$Label

ASV.order.mai <- c("euk;Rhizosolenia;Eb1000407","euk;Chaetoceros;Eb1000043","euk;Leptocylindrus;Eb1000190","euk;Thalassiosira;Eb1001204","euk;Minidiscus;Eb1000338","euk;Guinardia;Eb1000659","euk;Rhizosolenia;Eb1001509","euk;Thalassiosira;Eb1000094","euk;Minidiscus;Eb1000192","euk;Skeletonema;Eb1000789","euk;Skeletonema;Eb1001219","euk;Skeletonema;Eb1000779","euk;Thalassiosira;Eb1000926","euk;Chaetoceros;Eb1001502")

#Plot the CCA using ggplot
ggplot(df_sites, aes(x = CCA1, y = CCA2)) + 
  geom_point(data = df_sites, aes(colour = as.factor(season)), size = 6) + #pch =16
  geom_segment(data = df_env_arrow, aes(x = 0, y = 0, xend = CCA1, yend = CCA2), 
                arrow = arrowhead, size = 1, colour = "black") + 
  geom_text(data = df_env_arrow, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) + 
  geom_point(data = sp_mai, aes(x=CCA1, y =CCA2, fill = factor(Label, levels = c(ASV.order.mai))), size = 4, pch = 22) +
  #geom_text(data = ASVssp_mai, aes(x=1.2 *CCA1,y=1.2 *CCA2,label=labels), size=5) +
  geom_abline(intercept = 0,slope = 0,linetype="dashed", size=0.8) + 
  geom_vline(aes(xintercept=0), linetype="dashed", size=0.8) +
  scale_colour_manual("Season", values = c("#FF0000", "#998033", "#0B5394","#51A52D"), limits = c("summer", "autumn", "winter", "spring")) +
  scale_fill_manual("ASVid", values = mycolv.mai) +
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=1)) + 
  theme(legend.justification = c(0,0), axis.text = element_text(family = "Arial",  colour = "black", size = 20),
        axis.title = element_text(family = "Arial", size = 25),
        text = element_text(family = "Arial", size = 20)) +
  stat_ellipse(aes(group = season, colour = season),level=0.8, linetype = 2) +
  theme_bw(base_size = 15) +
  labs(title = "MAI")
```

## Figure S1 (barplot - Genera relative abundance by dates and sites)
```{r}
#Same order and colours as Figure 3 and Figure 5B
Genus.order<-c("Achnanthes","Actinocyclus","Amphora","Araphid-pennate_X","Arcocellulus","Asterionellopsis","Asteromphalus","Attheya","Bacillaria","Bellerochea","Biddulphia","Brockmanniella","Cerataulina","Corethron","Coscinodiscus","Cyclotella","Cymbella","Dactyliosolen","Delphineis","Detonula","Ditylum","Entomoneis","Epithemia","Eucampia","Eunotogramma","Fragilariopsis","Guinardia","g__unassigned","Haslea","Helicotheca","Hemiaulus","Hemidiscaceae_X","Lauderia","Licmophora","Licmosphenia","Lithodesmium","Luticola","Mastodiscus","Mastogloia","Meuniera","Minidiscus","Minutocellus","Navicula","Odontella","Palmerina","Papiliocellulus","Planktoniella","Pleurosigma","Polar-centric-Mediophyceae_X","Porosira","Proboscia","Psammodictyon","Raphid-pennate_X","Shionodiscus","Stellarima","Stephanodiscus","Stephanopyxis","Striatella","Surirella","Tabularia","Talaroneis","Thalassionema","Thalassiothrix","Triceratium","Bacteriastrum","Cylindrotheca","Leptocylindrus","Nitzschia","Rhizosolenia","Skeletonema","Pseudo-nitzschia","Thalassiosira","Chaetoceros") 
names(mycols73) <- unique(Genus.order)
```
```{r}
selection <- diatoms_surf %>% select("RA.percent", "month.abb", "date_utc", "tax.Genus", "uniqcode", "year", "sample")
selection <- distinct(selection)
selection$month.abb <- factor(selection$month.abb, levels=c("Jan", "Feb","Mar", "Apr","May", "Jun", "Jul","Aug","Sep","Oct","Nov", "Dec"))

ggplot(selection, aes(x=month.abb, y=RA.percent, fill=factor(tax.Genus, levels = c(Genus.order)))) + 
  geom_bar(stat='identity', position = position_fill()) + #,colour="black", size=0.25, width = 0.5) 
  facet_grid(uniqcode ~ year, scales = 'free_y') +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(legend.title = element_text(colour= "black", size=12, face= "bold" ))+
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=2)) +    
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 10, face = "bold", angle = 65, vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=16, face= "bold" ),
              legend.text = element_text(face = "italic", size = 14)) +
  scale_fill_manual(values = mycols73, "Genera") +
  labs(y = "Proportion (%)", x = "")
```

## Figure S2 (DIATOMS - Alpha Diversity index)
```{r}
library(phyloseq)
```
1) Make a smaller subset file 
```{r}
#Make a subset with only the column needed 
diatoms.na <- ungroup(diatoms_surf) %>% select("date_utc", "day_length", "temperature_deg_c", "silicate_umol_per_l", "depth_m", "sample", "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "uniqcode", "sample", "GID", "abund_rare", 'ASVid','tax.Kingdom', 'tax.Supergroup','tax.Division','tax.Class','tax.Family', 'tax.Genus','tax.Species', 'GID', 'ASV', "season", "climatic_zone", "Prop_diatoms_phyto")
# Square-root transform all the independent variables 
diatoms.na$day_length <- sqrt(diatoms.na$day_length)
diatoms.na$temperature_deg_c <- sqrt(diatoms.na$temperature_deg_c)
diatoms.na$silicate_umol_per_l <- sqrt(diatoms.na$silicate_umol_per_l)
diatoms.na$phosphate_umol_per_l <- sqrt(diatoms.na$phosphate_umol_per_l)
diatoms.na$nitrate_nitrite_umol_per_l <- sqrt(diatoms.na$nitrate_nitrite_umol_per_l)
diatoms.na$ammonium_umol_per_l <- sqrt(diatoms.na$ammonium_umol_per_l)
diatoms.na <- na.omit(diatoms.na)
```
2) Make the ASV matrix 
```{r}
com <- ungroup(diatoms.na) %>% select('sample', 'GID', 'abund_rare') %>% spread(key =sample, value=abund_rare, fill=0)  
com.matrix <-  as.matrix(com[,-c(1)])
row.names(com.matrix)<- paste0(com$GID)
com.matrix.nz <- com.matrix[,colSums(com.matrix)!=0] 
```
3) Make a metadata dataframe 
```{r}
env.vars <- ungroup(diatoms.na) %>% select(c("date_utc", "day_length", "temperature_deg_c", "silicate_umol_per_l", "depth_m", "sample",  "phosphate_umol_per_l", "nitrate_nitrite_umol_per_l", "ammonium_umol_per_l", "uniqcode", "season", "climatic_zone"))
env.vars <- distinct(env.vars)
rownames(env.vars) <- env.vars$sample
env.data = sample_data(data.frame(env.vars))
```
4) Make a taxonomy dataframe
```{r}
taxonomy <- ungroup(diatoms.na) %>% select(c('GID', 'ASVid','tax.Kingdom', 'tax.Supergroup','tax.Division','tax.Class','tax.Family', 'tax.Genus','tax.Species', 'ASV'))
taxonomy<- distinct(taxonomy) #make your list distinct
tax <-as.matrix(taxonomy)
rownames(tax) <- paste0(taxonomy$GID) #call the rows name with ASVid but add 18asv before it
tax2<-tax[1:nrow(tax), 2:8]
```
5) Create a phyloseq object
```{r}
OTU = otu_table(com.matrix.nz, taxa_are_rows = TRUE)
TAX = tax_table(tax2)
physeq = phyloseq(OTU, TAX)
physeq2 = merge_phyloseq(physeq, env.data)
```
6) PLot Alpha diversity indices in a boxplot
```{r}
# alpha diversity is measured on count data in phyloseq
plot_richness(physeq2, x = "uniqcode", measures= c("Observed", "Shannon", "Chao1", "InvSimpson")) +
  geom_boxplot(aes(x = uniqcode, y = value, fill = uniqcode), colour = "black", size = 0) + 
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 18, face = "bold", angle = 65, vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=12, face= "bold" ),
              legend.text = element_text(face = "italic")) +
  scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628")) +
  theme(legend.position = "") +
  labs(x = "") 
```
## Figure S3 (Peak Abundance Diatom / bacteria)
 NSI = "#4DAF4A", PHB = "#FF7F00", MAI = "#A65628"
```{r}
MAI = c("euk;Cerataulina;Eb1000702",
"euk;Rhizosolenia;Eb1001509",
"euk;Thalassiosira;Eb1000094",
"euk;Proboscia;Eb1000604")
PHB = c("euk;Thalassiosira;Eb1002649",
"euk;Guinardia;Eb1000659",
"euk;Thalassiosira;Eb1000094",
"euk;Proboscia;Eb1000604")
NSI = c("euk;Pseudo-nitzschia;Eb1000918",
"euk;Chaetoceros;Eb1001731",
"euk;Thalassiosira;Eb1000094")
```
```{r}
ggplot(diatoms_surf %>% dplyr::filter(GID %in% NSI & uniqcode == "NSI"), aes(x=season, y=RA.percent, fill = uniqcode)) + 
  #geom_point(position='stack') +
  #geom_line() + 
  geom_bar(stat = "identity") +
  facet_grid(GID ~ year, scales = "free_y") +
  theme_bw() + 
  theme(legend.position='') +
  theme(axis.text.x = element_text(colour="black", angle = 65, vjust = 0.6)) +
  scale_fill_manual(values = "#4DAF4A")

ggplot(diatoms_surf %>% dplyr::filter(GID %in% PHB & uniqcode == "PHB"), aes(x=season, y=RA.percent, fill = uniqcode)) + 
  geom_bar(stat = "identity") +
  facet_grid(GID ~ year, scales = "free_y") +
  theme_bw() + 
  theme(legend.position='') +
  theme(axis.text.x = element_text(colour="black", angle = 65, vjust = 0.6)) +
  scale_fill_manual(values = "#FF7F00")

ggplot(diatoms_surf %>% dplyr::filter(GID %in% MAI & uniqcode == "MAI"), aes(x=season, y=RA.percent, fill = uniqcode)) + 
  geom_bar(stat = "identity") +
  facet_grid(GID ~ year, scales = "free_y") +
  theme_bw() + 
  theme(legend.position='') +
  theme(axis.text.x = element_text(colour="black", angle = 65, vjust = 0.6)) +
  scale_fill_manual(values = "#A65628")
```

## Figure S4 (Temporal barplot + heatmap among photoautotroph)
```{r}
#Make a subset of the all dataset 
diatoms.temp <- diatoms_rare %>%  filter(uniqcode %in% c("NSI", "PHB", "MAI")) 
diatoms.temp <- diatoms.temp %>%  filter(year %in% c("2017", "2018", "2019"))
diatoms.temp <- diatoms.temp %>% filter(depth_m ==2)
plot.temp <- ungroup(diatoms.temp) %>% select("tax.Genus", "RA.percent", "uniqcode", "year", "month.abb", "date_utc", "season", "Prop_diatoms_phyto") 
```
```{r}
Genus.order<-c("Achnanthes","Actinocyclus","Amphora","Araphid-pennate_X","Arcocellulus","Asterionellopsis","Asteromphalus","Attheya","Bacillaria","Bellerochea","Biddulphia","Brockmanniella","Cerataulina","Corethron","Coscinodiscus","Cyclotella","Cymbella","Dactyliosolen","Delphineis","Detonula","Ditylum","Entomoneis","Epithemia","Eucampia","Eunotogramma","Fragilariopsis","Guinardia","g__unassigned","Haslea","Helicotheca","Hemiaulus","Hemidiscaceae_X","Lauderia","Licmophora","Licmosphenia","Lithodesmium","Luticola","Mastodiscus","Mastogloia","Meuniera","Minidiscus","Minutocellus","Navicula","Odontella","Palmerina","Papiliocellulus","Planktoniella","Pleurosigma","Polar-centric-Mediophyceae_X","Porosira","Proboscia","Psammodictyon","Raphid-pennate_X","Shionodiscus","Stellarima","Stephanodiscus","Stephanopyxis","Striatella","Surirella","Tabularia","Talaroneis","Thalassionema","Thalassiothrix","Triceratium","Bacteriastrum","Cylindrotheca","Leptocylindrus","Nitzschia","Rhizosolenia","Skeletonema","Pseudo-nitzschia","Thalassiosira","Chaetoceros") 
mycols73 <- c("#99EEFF","#33BBFF","#33DDFF","#086391","#5299E0","#007FFF","#004C99","#0dc9e5","#054261","#9EFADD","#73F1CA","#52E4BB","#3BCFAB","#2BB398","#A0E0F7","#7ECEED","#64B8DE","#4F9CC7","#3E7EA9","#ADBAFA","#899AF1","#6C7EE4","#5667CF","#4352B3","#D8BBFB","#C094F4","#AC74E8","#985CD5","#8548BB","#58156c","#F4C5FD","#EDA7F9","#E380EF","#D863DE","#C44CBF","#b43dd8","#FDC9E1","#FAADCF","#F189B4","#E46C98","#C74F6F","#FCBBBC","#ED7E80","#D75D5F","#E83535","#A93E3F","#8B4513","#A0522D","#A96928","#BD7E32","#CF923E","#DEA54D","#E9B65F","#724407","#F18109","#F29B0F","#F3B516","#F4CF1D","#FBFFB2","#A92A28","#BD3532","#D74945","#E45B55","#ED6F6A","#B8F792","#92ED6A","#6ADE4D","#3EC737","#28A93A","#99C745","#75A12D","#26912A","#1A6E20")
names(mycols73) <- unique(Genus.order)
```
```{r}
#Temporal PLOT
ggplot(plot.temp, aes(x=date_utc, y=RA.percent, fill=factor(tax.Genus, levels = c(Genus.order)))) + 
  geom_bar(stat='identity',width = 15) + #position = position_fill()  
  facet_grid(uniqcode ~ .) +
  theme(axis.text.x = element_text(angle = 90)) +
  theme(legend.title = element_text(colour= "black", size=12, face= "bold" ))+
  theme(legend.position = "right") +
  guides(fill=guide_legend(ncol=2)) +    
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 18, face = "bold", vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=20, face= "bold" ),
              legend.text = element_text(face = "italic", size = 14)) +
  scale_fill_manual(values = mycols73, "Genus sp.") +
  labs(y = "Relative Abundance", x = "")
```
```{r}
library(hrbrthemes)
## Heatmap
heatmap_temp <- ggplot(diatoms.temp, aes(x=date_utc, y=uniqcode, fill = Prop_diatoms_phyto)) + # fill=tax.Genus
  geom_tile(stat = "identity", width = 20) +
  #theme_bw()  +
  scale_fill_gradient(low="ivory", high="red") +
  theme_ipsum() +
  #theme(axis.text.x = element_text(angle = 65, vjust = 0.6)) +
  #theme(legend.title = element_text(colour= "black", size=12, face= "bold" ))+
  theme(legend.position = "right") +
  labs(title = "Proportion of diatoms over phytoplankton community",
       x = "",
       y = "") 
heatmap_temp
```

## Figure S5 (Temporal BACTERIA barplot)
Group by tax.Genus to calculate a new average
```{r}
subsetbac <- bac_surf2 %>% select("tax.Family", "tax.Order", "tax.Genus", "sample", "abund_rare", "uniqcode", "utc_date_sampled_yyyymmdd", "prec")
subsetbac <- subsetbac %>% filter(prec > 0.5)
subsetbac <- subsetbac %>% separate(utc_date_sampled_yyyymmdd, c("year", "month", "day"), remove=F, sep= "-")
subsetbac_total <- subsetbac %>% group_by(month, tax.Family, uniqcode) %>% dplyr::summarise(newtot = sum(abund_rare))
subsetbac_total2 <- subsetbac_total %>% group_by(uniqcode, month) %>% dplyr::summarise(sitetot = sum(newtot)) 
subsetbac_total3 <- subsetbac_total2 %>% left_join(subsetbac_total)
subsetbac_ra_month <- subsetbac_total3 %>% group_by(month, tax.Family, uniqcode) %>% dplyr::summarise(monthtot = (newtot / sitetot)*100)
subsetbac_ra_month$month.abb <- factor(month.abb[as.integer(subsetbac_ra_month$month)], levels=c("Jan", "Feb","Mar", "Apr","May",  "Jun", "Jul","Aug","Sep","Oct","Nov", "Dec"))
subsetbac_ra_month$uniqcode <- factor(subsetbac_ra_month$uniqcode, levels =rev(c("MAI", "KAI", "PHB","ROT", "NSI", "YON", "DAR")))
```
Plot - Relative abundance of each Genera per site per month
```{r}
palette <- distinctColorPalette(127)
ggplot(subsetbac_ra_month, aes(x= month.abb, y=monthtot, fill = tax.Family)) + 
        geom_bar(stat='identity', colour="black", size=0.25) + 
        facet_grid(. ~ uniqcode, scales = 'free_y') +
        theme(legend.position='right') + 
        scale_fill_manual(values = palette, "Family") +
        guides(fill=guide_legend(ncol=3)) +     
        theme_bw() +
        theme(panel.grid.major = element_line(colour = "#d3d3d3"),
              panel.grid.minor = element_blank(),
              #panel.border = element_blank(),
              panel.background = element_blank(),
              plot.title = element_text(size = 14, family = "Arial", face = "bold"),
              text=element_text(family = "Arial"),
              axis.title = element_text(size = 20, family = "Arial",face="bold"),
              axis.text.x = element_text(colour="black", size = 12, face = "bold",angle = 65, vjust = 0.6),
              axis.text.y = element_text(colour="black", size = 18),
              axis.line = element_line(size=0.5, colour = "black"),
              legend.title = element_text(colour= "black", size=20, face= "bold" ),
              legend.text = element_text(size = 12)) + #face = "italic"
        labs(y = "Proportion (%)", x = "")
```
